openapi: "3.0.0"
info:
  title: I-Need-REST API
  description: This is a REST spesification for the first stargate workshop.
  version: 1.0.0
servers:
  - url: https://www.starg.at/e/api
    description: Production server
paths:
  /register:
    post:
      tags:
      - Register
      summary: Register your ID to the competition
      description: This endpoint will register the members of the registrationbody in our database as a group. It will also, provided a valid structure, give you a token that must be provided to the /scoreboard endpoint to submit your team's score.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistrationBody"
      responses:
        200:
          description: Successfully registered your group
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/RegistrationResponse"
        400:
          description: Body is incorrect, try changing structure to match documentation
  
  /scoreboard:
    get:
      tags:
      - Scoreboard
      summary: Returns list of scoreboard with basic information about each player
      responses:
        200:
          description: Successful response with list of submissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScoreboardGetResponse"
    post:
      tags:
      - Scoreboard
      summary: Submits your time to the scoreboard
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScoreboardRequestBody"
      responses:
        200:
          description: Successfully added submission to scoreboard
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScoreboardPostResponse"
      
  /ðŸ”«:
    get:
      tags:
      - ðŸ”«
      summary: AMMU-nation
      parameters:
        - in: query
          name: registrationKey
          required: true
          schema:
            $ref: '#/components/schemas/SignedKey'
      responses:
        200:
          description: Successfully return of fresh ammo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GunGetResponse'
  
  /ðŸ”«/{targetId}:            
    post:
      tags:
      - ðŸ”«
      summary: Noone likes competition
      description: "You can choose to use ammunition to shoot another group on the scoreboard and you can even decide how much time you want to add to another player. The time/risk matrix looks like this [low: {time: 5m, hitchance: 85%}, medium: {time: 15m, hitchance: 50%}, high: {time: 30m, hitchance: 15%}, extreme: {time: 45m, hitchance: 5%}]"
      parameters: 
        - in: path
          name: targetId
          required: true
          schema:
            $ref: '#/components/schemas/GroupId'
        - in: query
          name: signedKey
          required: true
          schema:
            $ref: '#/components/schemas/SignedKey'
        - in: query
          name: risk
          required: true
          schema:
            type: string
            enum: [low, medium, high, extreme]
      responses:
        200:
          description: BULLSEYE! You have hit your target and added a time-penalty on their score :D Pew!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GunPostSuccessResponse'
        404:
          description: Target not found...
          content:
            text/plain:
              schema:
                type: string
                example: "You aim at nothing, luckily you did not shoot!"
        418:
          description: You're a Teapot. You hurt yourself in confucion, time has been added to your score...
components:
  schemas:  
    IdentificationKey:
      type: string
      format: uuid
      description: This is the key that you got in the email that was sent to you before the workshop
    GroupId:
      type: string
      format: uuid
      description: Unique identificator for the group 
    SignedKey:
      type: string
      description: Signed key that is retrieved from the /registration post endpoint
      example: "signed-key-example"
    Ammo:
      type: string
      format: uuid
      description: A uuid that is used as a bullet in the post endpoint of ðŸ”«
    RegistrationBody:
      type: object
      properties:
        name:
          type: string
          description: Name
          example: "Group 1"
        members:
          type: array
          items:
            type: object
            properties:
              id:
                $ref: '#/components/schemas/IdentificationKey'
      required:
        - name
        - members
        
    RegistrationResponse:
      type: object
      properties:
        signedkey:
          $ref: '#/components/schemas/SignedKey'
      
    ScoreboardGetResponse:
      type: array
      items:
        type: object
        properties:
          name:
            description: Name of submission name
            type: string
            example: "Group 1"
          groupid:
            $ref: '#/components/schemas/GroupId'
    ScoreboardPostResponse:
      type: object
      properties:
        result:
          type: string
          example: 42 minutes
        message:
          type: string
          example: ""
    ScoreboardRequestBody:
      type: object
      properties:
        signedkey:
          $ref: '#/components/schemas/SignedKey'
    GunGetResponse:
      type: object
      properties:
        ammo:
          $ref: '#/components/schemas/Ammo'
        ammoleft:
          type: integer
          example: 3
    GunPostSuccessResponse:
      type: object
      properties:
        message: 
          type: string
          example: "You added 5 minutes to Group 4"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"